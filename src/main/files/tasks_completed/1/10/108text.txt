Состав группы проекта: менеджер проекта (управление сроками, контроль выполнения задач, организация взаимодействия между участниками команды), аналитик (определение требований системы, взаимодействие с заказчиком, документирование), fullstack-разработчик (совмещает backend, frontend и системного архитектора), devops (настройка ci/cd, управление инфраструктурой), тестировщик (тестирование системы), сотрудник поддержки (обратная связь с пользователями и помощь в решении проблем пользователей).
Планирование процессов:
Жизненный цикл включает период создания и использования образовательной онлайн-системы, начиная с момента возникновения потребности в продукте, заканчивая разработкой, тестированием и отладкой, поставкой программной продукции, ее эксплуатацией на объектах Заказчика и технической поддержкой.
Разработка продукта ведётся по каскадной модели, где каждый этап завершается полностью перед переходом к следующему. Разработка включает в себя следующие последовательные стадии: анализ требований, проектирование, реализацию, тестирование, развертывание и сопровождение. После завершения этапа тестирования система передаётся в эксплуатацию без внесения изменений до следующего планового обновления.
Данная модель выбрана по следующим причинам:
	Основные требования к системе согласуются с заказчиком на этапе анализа и остаются неизменными. Некритичные изменения могут быть реализованы на этапе сопровождения
	Проект понятный и относительно небольшой
	Процесс разработки строго упорядочен, поэтому модель понятна и управляема
	Можно заранее оценить сроки и требуемые ресурсы
Модель жизненного цикла обеспечивает строгий контроль над разработкой и сопровождением системы. В процессе разработки используется система контроля версий (github) для управления конфигурацией сервиса и gitlab для организации работы команды.
	Анализ требований:
На данном этапе проводится сбор и анализ требований к системе. Аналитик определяет основные функциональные и нефункциональные требования. Менеджер организует процесс анализа и согласовывает результаты с заказчиком. Разработчик даёт оценку реализуемости требований.
Процессом анализа требований определён порядок:
	Аналитик взаимодействует с заказчиком и определяет цель системы, основные функции, ограничения, ожидаемый результат.
	Аналитик разделяет требования на функциональные и нефункциональные 
	Менеджер и аналитик проводят оценку требований на полноту, противоречивость, реализуемость и т.д.
	Аналитик с участием разработчика и тестировщика разрабатывает ТЗ, которое утверждается заказчиком и менеджером
	Менеджер и аналитик с участием разработчика определяют список задач и сроки их выполнения
	Менеджер устанавливает ответственность за разработку, распределяя задачи между членами команды
Коммуникация команды:
Взаимодействие участников команды осуществляется через gitlab, обеспечивая прозрачность и контроль версий. Задачи создаются в виде issues, в них указываются исполнители и сроки. В комментариях можно уточнить детали задачи. Также для разделения задач по группам можно использовать метки. Раз в неделю проводится встреча, на которой обсуждается текущий прогресс выполнения задач. При необходимости организуются отдельные встречи для обсуждения изменений в архитектуре.
Результатом этапа являются техническое задание, которое утверждается всеми заинтересованными сторонами и список задач по продукту, включающий в себя исполнителя и сроки каждой задачи.
	Проектирование:
На данном этапе создаётся архитектура и структура ПО на основе утверждённых требований. Основная цель – спроектировать систему так, чтобы она соответствовала поставленным в ТЗ задачам. Разработчик проектирует архитектуру. devops определяет требования к инфраструктуре. Аналитик формирует сценарии использования.
Процессом проектирования определён порядок:
	Разработка концепцию архитектуры (выбор архитектуры, определение взаимодействия компонентов, выбор технологий)
	Проектирование структуры БД
	Проектирование серверной части (определение схемы безопасности, механизмов асинхронности, структуры серверной части системы)
	Проектирование клиентской части (определение пользовательских сценариев, создание прототипа интерфейса)
	Определение инфраструктуры и devops-процессов (выбор в качестве среды развёртывания docker, разработка ci/cd-процессов)
	Составление технической документации
Результатом этапа являются прототип пользовательского интерфейса, архитектурное решение системы, документы api и devops.
	Реализация:
На данном этапе разработчиком создаётся исходный код системы на основе утверждённого проектного решения. Основная цель – написать работоспособное программное обеспечение, соответствующее архитектуре, требованиям и бизнес-логике. Разработчик отвечает за реализацию кодовой части. Для этого в gitlab создаются отдельные ветки. devops настраивает инфраструктуру и ci/cd. Менеджер отвечает за контроль сроков и координацию команды.
Процессом реализации определён порядок:
	Реализация серверной части (структуры проекта spring boot, rest api, настройка связи с mysql, реализация бизнес-логики (видеоконференции, задания, электронный журнал), настройка логирования и мониторинга)
	Реализация клиентской части (создание страниц приложения с использованием html5, css3, javascript, реализация клиентской логики, подключение api)
	Настройка тестовой среды и ci/cd (подключение gitlab)
Результатом этапа являются исходный код, настроенная среда выполнения и ci/cd, готовая к тестированию система.
	Тестирование:
На данном этапе выявляются дефекты, проводится проверка соответствия системы требованиям и обеспечение её стабильности. Этот этап включает автоматизированные и ручные тесты, проверку функциональности, безопасности и производительности. Тестирование проводится тестировщиком. Менеджер координирует исправление критических недочётов. По результатам тестирования разработчик устраняет ошибки и дорабатывает систему.
Процессом тестирования определён порядок:
	Проведение unit-тестирования с помощью JUnit
	Интеграционное тестирование (проверка взаимодействия между клиентской частью и серверной, серверной частью и БД, тестирование api с помощью postman)
	Функциональное тестирование (проверка работы бизнес-логики, тестирование основных пользовательских сценариев)
	Тестирование интерфейса (проверка на удобство, проверка корректного отображения элементов и их реакции на взаимодействие с ними)
	Нагрузочное тестирование с помощью JMeter
	Тестирование безопасности (поиск открытых портов с помощью nmap, проверка maven-зависимостей с помощью owasp-dependency check, поиск xss- и csrf-уязвимостей)
	Формирование отчёта о стабильности системы без и с нагрузкой и о найденных недочётах. 
	Согласование с разработчиком и менеджером разрешения на развёртывание стабильной версии
Результатом этапа являются отчёты о тестировании, готовая к развёртыванию стабильная система.
	Развёртывание:
На данном этапе devops устанавливает и настраивает все необходимые компоненты на продакшен-сервере, конфигурации окружения, обновляет базы данных, устанавливает приложение, тестировщик проводит тестирование после развертывания и менеджер осуществляет передачу системы в эксплуатацию, а также организует процесс обучения пользователей, аналитик пишет необходимую документацию в gitlab wiki (руководства пользователей, техническую документацию и т.д.).
Процессом развёртывания определён порядок:
	Подготовка окружения (настройка ОС, установка зависимостей, миграция БД)
	Сборка приложения (компиляция кода и сборка war-артефакта, контейнеризация в docker контейнер)
	Развёртывание (перенос артефакта на сервер, развёртывание с использованием ci/cd, запуск приложения)
	Настройка мониторинга и логирования (подключение spring monitor, подключение уведомлений о сбоях)
	Передача в эксплуатацию (передача инструкций и документаций, обучение пользователей)
Результатом этапа является настроенная и готовая к эксплуатации система.
	Сопровождение:
Данный этап включает мониторинг работоспособности системы, устранение багов, обработку запросов пользователей, выпуск обновлений и оптимизацию работы. Основная цель – поддержание стабильности, безопасности и высокой производительности системы, а также расширение функционала после её развёртывания. Аналитик собирает и анализирует отзывы пользователей и активность конкурентов. Разработчик исправляет ошибки и реализует обновления. Менеджер организует работу над новыми версиями системы.
Обеспечение безопасности:
В случае самостоятельного или с помощью заявок от пользователей обнаружения уязвимостей создается issue. Все критические уязвимости имеют высший приоритет и устраняются в течении 2-ух суток. Раз в месяц проводится тестирование на проникновение.
Процессом сопровождения определён порядок:
	Мониторинг и анализ работы системы (анализ нагрузки, логирование событий)
	Устранение ошибок и сбоев
	Техническая поддержка
	Оптимизация (улучшение производительности, повышение безопасности, регулярное обновление зависимостей)
Техническая поддержка:
Техническая поддержка пользователей осуществляется в формате консультирования пользователей и администраторов сервиса по вопросам установки, администрирования и эксплуатации программного обеспечения по электронным каналам связи. В рамках тех. поддержки оказываются следующие услуги:
	помощь в установке системы
	помощь в администрировании
	предоставление руководства пользователя/администратора
	описание функционала системы, помощь в эксплуатации
Обновления системы:
Обновления выпускаются по необходимости, например, обновление безопасности или обновление пользовательского интерфейса в соответствии с трендами. Все изменения также документируются в gitlab wiki. Используется версионирование по схеме major.minor.patch (major – значительные изменения, несовместимые со старыми версиями; minor – менее значительные изменения, совместимые со старыми версиями; patch – исправление ошибок). Перед выпуском обновлений, новая версия системы проходит проверки, определённые этапом тестирования в специальной тестовой среде. Все обновления разворачиваются через контейнеризацию, что позволяет откатиться на предыдущую стабильную версию в случае возникновения ошибок. Разработчик проводит анализ и устранение ошибок.
В заявке на тех. поддержку пользователь указывает описание проблемы, шаги, приведшие к проблеме (опционально). После решения проблемы пользователя, заявке присваивается статус «завершено». Завершённые заявки хранятся в течение 21 дня после завершения.
Персонал, обеспечивающий работу на местах:
Пользователи системы должны обладать навыками работы с ПК на уровне пользователя. Перед началом работы рекомендуется изучить руководство пользователя.
Администратор системы должен владеть навыками работы с персональным компьютером на уровне уверенного пользователя. Обязательно знание основ работы вычислительной техники и программного обеспечения в локальных сетях, а также навык использования операционных систем семейства Unix не ниже уровня уверенного пользователя.
Персонал тех. поддержки:
Сотрудник тех. поддержки должен иметь следующие знания и навыки:
	владение ПК на уровне уверенного пользователя
	знание java и spring boot
	знание mysql
	знание протоколов обмена данными
	знание средств восстановления БД
	знание функциональных возможностей Системы и особенностей работы с ними
Результатом этапа является стабильно работающая и обновляемая система с минимальными простоями. Процесс сопровождения является непрерывным и продолжается до завершения жизненного цикла системы.
